#!/bin/bash

api-events_update() {
	conf_write status-api $1
	if [[ -a /opt/webinoly/lib/api-events ]]; then
		source /opt/webinoly/lib/api-events
		api-events_catch_status $1
	fi
}


conf_read() {
	local val=$(grep -w "^${1}:.*" /opt/webinoly/webinoly.conf | cut -f 2 -d ':')
	echo $val
}

conf_write() {
	mkdir -p /opt/webinoly
	[[ ! -a /opt/webinoly/webinoly.conf ]] && sudo touch /opt/webinoly/webinoly.conf
	#if requested VAR exists overwrite it, if not, create it.
	sed -i "/^${1}:/d" /opt/webinoly/webinoly.conf
	sh -c "echo -n '$1:$2\n' >> /opt/webinoly/webinoly.conf"
}

conf_delete() {
	sed -i "/^${1}:/d" /opt/webinoly/webinoly.conf
}


php_optim() {
	api-events_update ip3
	[[ -n $1 ]] && ver="$1" || ver=$(conf_read php-ver)

	if [[ -n $(conf_read max-mb-uploads) && $(conf_read max-mb-uploads) =~ ^[0-9]+$ ]]; then
		local maxuploads=$(conf_read max-mb-uploads)
	else
		local maxuploads="100"
	fi
	
	# Not needed anymore! https://serverfault.com/questions/627903/is-the-php-option-cgi-fix-pathinfo-really-dangerous-with-nginx-php-fpm
	#sudo sed -i '/cgi.fix_pathinfo=/c\cgi.fix_pathinfo=0' /etc/php/$ver/fpm/php.ini
	
	sudo sed -i '/memory_limit =/c\memory_limit = 128M' /etc/php/$ver/fpm/php.ini
	sudo sed -i '/max_execution_time =/c\max_execution_time = 300' /etc/php/$ver/fpm/php.ini
	sudo sed -i '/expose_php =/c\expose_php = Off' /etc/php/$ver/fpm/php.ini
	sudo sed -i "/upload_max_filesize =/c\upload_max_filesize = ${maxuploads}M" /etc/php/$ver/fpm/php.ini
	sudo sed -i "/post_max_size =/c\post_max_size = ${maxuploads}M" /etc/php/$ver/fpm/php.ini
	sudo sed -i '/max_file_uploads =/c\max_file_uploads = 20' /etc/php/$ver/fpm/php.ini
	sudo sed -i '/session.cookie_httponly =/c\session.cookie_httponly = 1' /etc/php/$ver/fpm/php.ini
	set_timezone php

	sudo mkdir -p /var/log/php/$ver
	sudo touch /var/log/php/$ver/fpm.log
	sudo sed -i "/error_log =/c\error_log = /var/log/php/$ver/fpm.log" /etc/php/$ver/fpm/php-fpm.conf
	sudo sed -i '/log_level =/c\log_level = notice' /etc/php/$ver/fpm/php-fpm.conf

	sudo sed -i '/pm =/c\pm = ondemand' /etc/php/$ver/fpm/pool.d/www.conf
	sudo sed -i '/request_terminate_timeout =/c\request_terminate_timeout = 300' /etc/php/$ver/fpm/pool.d/www.conf
	sudo sed -i '/pm.max_spare_servers =/c\pm.max_spare_servers = 30' /etc/php/$ver/fpm/pool.d/www.conf
	sudo sed -i '/pm.min_spare_servers =/c\pm.min_spare_servers = 10' /etc/php/$ver/fpm/pool.d/www.conf
	sudo sed -i '/pm.start_servers =/c\pm.start_servers = 20' /etc/php/$ver/fpm/pool.d/www.conf
	sudo sed -i '/pm.max_children =/c\pm.max_children = 100' /etc/php/$ver/fpm/pool.d/www.conf
	sudo sed -i '/pm.max_requests =/c\pm.max_requests = 500' /etc/php/$ver/fpm/pool.d/www.conf
	sudo sed -i '/pm.status_path =/c\pm.status_path = /status' /etc/php/$ver/fpm/pool.d/www.conf
	sudo sed -i '/ping.path =/c\ping.path = /ping' /etc/php/$ver/fpm/pool.d/www.conf

	if [[ $(conf_read multi-php) == "true" ]]; then
		[[ $ver == 7.2 ]] && sudo sed -i '/listen = /c\listen = 127.0.0.1:9000' /etc/php/$ver/fpm/pool.d/www.conf
		[[ $ver == 7.1 ]] && sudo sed -i '/listen = /c\listen = 127.0.0.1:9002' /etc/php/$ver/fpm/pool.d/www.conf
		[[ $ver == 7.0 ]] && sudo sed -i '/listen = /c\listen = 127.0.0.1:9004' /etc/php/$ver/fpm/pool.d/www.conf
		[[ $ver == 5.6 ]] && sudo sed -i '/listen = /c\listen = 127.0.0.1:9006' /etc/php/$ver/fpm/pool.d/www.conf
	else
		sudo sed -i '/listen = /c\listen = 127.0.0.1:9000' /etc/php/$ver/fpm/pool.d/www.conf
	fi
	
	sudo touch /var/log/php/$ver/slow.log
	sudo cp /etc/php/$ver/fpm/pool.d/www.conf /etc/php/$ver/fpm/pool.d/debug.conf
	sudo sed -i '/\[www\]/c\[debug]' /etc/php/$ver/fpm/pool.d/debug.conf
	sudo sed -i '/rlimit_core =/c\rlimit_core = unlimited' /etc/php/$ver/fpm/pool.d/debug.conf
	sudo sed -i "/slowlog =/c\slowlog = /var/log/php/$ver/slow.log" /etc/php/$ver/fpm/pool.d/debug.conf
	sudo sed -i '/request_slowlog_timeout =/c\request_slowlog_timeout = 10s' /etc/php/$ver/fpm/pool.d/debug.conf

	if [[ $(conf_read multi-php) == "true" ]]; then
		[[ $ver == 7.2 ]] && sudo sed -i '/listen = /c\listen = 127.0.0.1:9001' /etc/php/$ver/fpm/pool.d/debug.conf
		[[ $ver == 7.1 ]] && sudo sed -i '/listen = /c\listen = 127.0.0.1:9003' /etc/php/$ver/fpm/pool.d/debug.conf
		[[ $ver == 7.0 ]] && sudo sed -i '/listen = /c\listen = 127.0.0.1:9005' /etc/php/$ver/fpm/pool.d/debug.conf
		[[ $ver == 5.6 ]] && sudo sed -i '/listen = /c\listen = 127.0.0.1:9007' /etc/php/$ver/fpm/pool.d/debug.conf
	else
		sudo sed -i '/listen = /c\listen = 127.0.0.1:9001' /etc/php/$ver/fpm/pool.d/debug.conf
	fi
	
	if [[ -n $ver && ($ver == "7.2" || $ver == "7.1" || $ver == "7.0") ]]; then
		# xdebug deprecated in 5.6
		sudo echo 'php_admin_flag[xdebug.profiler_enable] = off' >> /etc/php/$ver/fpm/pool.d/debug.conf
		sudo echo 'php_admin_flag[xdebug.profiler_enable_trigger] = on' >> /etc/php/$ver/fpm/pool.d/debug.conf
		sudo echo 'php_admin_value[xdebug.profiler_output_name] = cachegrind.out.%p-%H-%R' >> /etc/php/$ver/fpm/pool.d/debug.conf
		sudo echo 'php_admin_value[xdebug.profiler_output_dir] = /tmp/' >> /etc/php/$ver/fpm/pool.d/debug.conf 
		sudo sed -i '/zend_extension=/c\;zend_extension=xdebug.so' /etc/php/$ver/mods-available/xdebug.ini
	fi
	
	conf_write php-optim true
	sudo service php*-fpm reload
	api-events_update ip4
}



pre_install() {
	sudo apt-get -qq update
	if [[ $(conf_read pre-packs) != true ]]; then
		# Check for missing essential packages
		
		api-events_update i1
		#sudo apt-get -y -qq install software-properties-common
		#sudo apt-get -y -qq install python-software-properties
		sudo apt-get -y -qq install pwgen
		sudo apt-get -y -qq install unzip
		sudo apt-get -y -qq install zip
		conf_write pre-packs true
		api-events_update i2
		
		export DEBIAN_FRONTEND=noninteractive
		export HOSTNAME=$(curl -s http://169.254.169.254/metadata/v1/hostname)
		export PUBLIC_IPV4=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)

		# Install Nginx
		#apt-get -y update
		#apt-get -y install nginx

		# Write hostname and IP address to index.html
		mkdir -p /var/www/html
		sed -i -e "s|/usr/share/nginx/html|/var/www/html|g" /etc/nginx/sites-available/default
		echo -e "<html><body><strong>Droplet:</strong> $HOSTNAME<br><strong>IP Address:</strong> $PUBLIC_IPV4</html></body>" \
		    > /var/www/html/index.html
	fi
}

php_install() {
	api-events_update ip1
	if [[ -n $(conf_read php-ver) && ($(conf_read php-ver) == "7.2" || $(conf_read php-ver) == "7.1" || $(conf_read php-ver) == "7.0" || $(conf_read php-ver) == "5.6") ]]; then
		echo "${gre}Default PHP version '$(conf_read php-ver)' detected!${end}"
	else
		# Default PHP version
		conf_write php-ver 7.2
	fi
	ver=$(conf_read php-ver)
	
	# Multi-PHP
	if [[ $(conf_read multi-php) == "true" && -n $1 && $1 =~ ^(5.6|7.0|7.1|7.2)$ && $(conf_read php) == "true" && $1 != $ver ]]; then
		ver="$1"
		echo "${gre}Multi-PHP version is enabled. PHP '$ver' will be installed!${end}"
	elif [[ $(conf_read multi-php) != "true" && -n $1 ]]; then
		echo "${red}Multi-PHP is not enabled! ${end}"
		exit 1
	elif [[ $(conf_read multi-php) == "true" && -n $1 ]]; then
		echo "${red}Please, enter a valid PHP version or default PHP is not installed yet! ${end}"
		exit 1
	fi
	
	if [[ $(conf_read php) != "true" ]]; then
		# Fix ondrej issue - https://github.com/oerdnj/deb.sury.org/issues/56
		sudo apt-get install -y language-pack-en-base
		sudo LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php
	fi
	pre_install
	sudo apt-get -y install php${ver}-common php${ver}-cli php${ver}-fpm php${ver}-curl php${ver}-gd php${ver}-imap php${ver}-readline php${ver}-recode php${ver}-mysql php${ver}-mbstring php${ver}-bcmath php${ver}-mysql php${ver}-opcache php${ver}-zip php${ver}-xml php${ver}-soap php-imagick graphviz php-pear php-msgpack
	
	if [[ -n $ver && ($ver == "7.1" || $ver == "7.0" || $ver == "5.6") ]]; then
		# mcrypt deprecated in 7.2
		sudo apt-get -y install php${ver}-mcrypt
	fi
	if [[ -n $ver && ($ver == "7.2" || $ver == "7.1" || $ver == "7.0") ]]; then
		# xdebug deprecated in 5.6
		sudo apt-get -y install php-xdebug
	fi
	
	def=$(conf_read php-ver)
	if [[ $(conf_read php-v${def}) != "true" ]]; then
		sudo cp /etc/php/$ver/fpm/php.ini /opt/webinoly/templates/source/
		sudo cp /etc/php/$ver/fpm/pool.d/www.conf /opt/webinoly/templates/source/
	fi
	
	conf_write php true
	conf_write php-v$ver true
	echo "${gre}PHP has been installed successfully! ${end}"
	api-events_update ip2
}


mysql_install() {
	api-events_update im1
	[[ $(conf_read mysql-client) != "true" ]] && mysql_client_install
	
	pre_install
	# debconf-utils for unattended scripts
	#  debconf-get-selections | grep phpmyadmin   <<-- list conf variables
	sudo apt-get -y install debconf-utils
	
	# Generate mysql user passwords
	local AUTOGENPASS_ROOT=`pwgen -s -1`
	local AUTOGENPASS_ADMIN=`pwgen -s -1`
	local enc_pass_root=$( echo $AUTOGENPASS_ROOT | openssl enc -a -salt )
	local enc_pass_admin=$( echo $AUTOGENPASS_ADMIN | openssl enc -a -salt )
	conf_write mysql-root $enc_pass_root
	conf_write mysql-admin $enc_pass_admin
	
	# MariaDB Installation
	echo "mariadb-server-10.2 mysql-server/root_password password $AUTOGENPASS_ROOT" | debconf-set-selections
	echo "mariadb-server-10.2 mysql-server/root_password_again password $AUTOGENPASS_ROOT" | debconf-set-selections
	sudo apt-get -y install mariadb-server

	#Instead of mysql_secure_installation we do this: (same but manually, because not acept unattended)
	#ALTER USER 'root'@'localhost' IDENTIFIED BY '${AUTOGENPASS_ROOT}';   <<<--- For MySQL 5.7.6 and newer as well as MariaDB 10.1.20 and newer instead of UPDATE
	sudo mysql --user=root -p$AUTOGENPASS_ROOT <<_EOF_
UPDATE mysql.user SET authentication_string = PASSWORD('${AUTOGENPASS_ROOT}') WHERE User = 'root' AND Host = 'localhost';
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
CREATE USER IF NOT EXISTS 'admin'@'localhost' IDENTIFIED BY '${AUTOGENPASS_ADMIN}';
GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
_EOF_

	conf_write mysql true
	echo "${gre}MySQL has been installed successfully! ${end}"
	api-events_update im4
}


main() {
mysql_install
php_install
php_optim
}

main


